# coding: utf-8

"""
    BrowserCat API

    Providing purr-fect headless browser access via utility endpoints and direct websocket connections.

    The version of the OpenAPI document: 1.0.0
    Contact: support@browsercat.com
    Created by: https://www.browsercat.com/contact
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from browser_cat_python_sdk import schemas  # noqa: F401


class Subscription(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "periodStartsAt",
            "pausedAt",
            "periodEndsAt",
            "periodUnit",
            "anchoredAt",
            "subId",
            "tier",
            "canceledAt",
            "periodCount",
            "resumedAt",
            "currency",
            "stripeSubId",
            "stripeCusId",
            "status",
        }
        
        class properties:
            subId = schemas.StrSchema
            
            
            class tier(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def HOBBY(cls):
                    return cls("hobby")
                
                @schemas.classproperty
                def BUSINESS(cls):
                    return cls("business")
                
                @schemas.classproperty
                def ENTERPRISE(cls):
                    return cls("enterprise")
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def INCOMPLETE(cls):
                    return cls("incomplete")
                
                @schemas.classproperty
                def INCOMPLETE_EXPIRED(cls):
                    return cls("incomplete_expired")
                
                @schemas.classproperty
                def ACTIVE(cls):
                    return cls("active")
                
                @schemas.classproperty
                def TRIALING(cls):
                    return cls("trialing")
                
                @schemas.classproperty
                def PAST_DUE(cls):
                    return cls("past_due")
                
                @schemas.classproperty
                def UNPAID(cls):
                    return cls("unpaid")
                
                @schemas.classproperty
                def CANCELED(cls):
                    return cls("canceled")
                
                @schemas.classproperty
                def PAUSED(cls):
                    return cls("paused")
            
            
            class currency(
                schemas.StrSchema
            ):
                pass
            
            
            class periodUnit(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def DAY(cls):
                    return cls("day")
                
                @schemas.classproperty
                def WEEK(cls):
                    return cls("week")
                
                @schemas.classproperty
                def MONTH(cls):
                    return cls("month")
                
                @schemas.classproperty
                def YEAR(cls):
                    return cls("year")
            
            
            class periodCount(
                schemas.IntSchema
            ):
                pass
            periodStartsAt = schemas.DateTimeSchema
            periodEndsAt = schemas.DateTimeSchema
            anchoredAt = schemas.DateTimeSchema
            
            
            class canceledAt(
                schemas.DateTimeBase,
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'canceledAt':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class resumedAt(
                schemas.DateTimeBase,
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'resumedAt':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class pausedAt(
                schemas.DateTimeBase,
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'pausedAt':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            stripeSubId = schemas.StrSchema
            stripeCusId = schemas.AnyTypeSchema
            __annotations__ = {
                "subId": subId,
                "tier": tier,
                "status": status,
                "currency": currency,
                "periodUnit": periodUnit,
                "periodCount": periodCount,
                "periodStartsAt": periodStartsAt,
                "periodEndsAt": periodEndsAt,
                "anchoredAt": anchoredAt,
                "canceledAt": canceledAt,
                "resumedAt": resumedAt,
                "pausedAt": pausedAt,
                "stripeSubId": stripeSubId,
                "stripeCusId": stripeCusId,
            }
    
    periodStartsAt: MetaOapg.properties.periodStartsAt
    pausedAt: MetaOapg.properties.pausedAt
    periodEndsAt: MetaOapg.properties.periodEndsAt
    periodUnit: MetaOapg.properties.periodUnit
    anchoredAt: MetaOapg.properties.anchoredAt
    subId: MetaOapg.properties.subId
    tier: MetaOapg.properties.tier
    canceledAt: MetaOapg.properties.canceledAt
    periodCount: MetaOapg.properties.periodCount
    resumedAt: MetaOapg.properties.resumedAt
    currency: MetaOapg.properties.currency
    stripeSubId: MetaOapg.properties.stripeSubId
    stripeCusId: MetaOapg.properties.stripeCusId
    status: MetaOapg.properties.status
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subId"]) -> MetaOapg.properties.subId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tier"]) -> MetaOapg.properties.tier: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["periodUnit"]) -> MetaOapg.properties.periodUnit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["periodCount"]) -> MetaOapg.properties.periodCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["periodStartsAt"]) -> MetaOapg.properties.periodStartsAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["periodEndsAt"]) -> MetaOapg.properties.periodEndsAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["anchoredAt"]) -> MetaOapg.properties.anchoredAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["canceledAt"]) -> MetaOapg.properties.canceledAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resumedAt"]) -> MetaOapg.properties.resumedAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pausedAt"]) -> MetaOapg.properties.pausedAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stripeSubId"]) -> MetaOapg.properties.stripeSubId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stripeCusId"]) -> MetaOapg.properties.stripeCusId: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["subId", "tier", "status", "currency", "periodUnit", "periodCount", "periodStartsAt", "periodEndsAt", "anchoredAt", "canceledAt", "resumedAt", "pausedAt", "stripeSubId", "stripeCusId", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subId"]) -> MetaOapg.properties.subId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tier"]) -> MetaOapg.properties.tier: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["periodUnit"]) -> MetaOapg.properties.periodUnit: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["periodCount"]) -> MetaOapg.properties.periodCount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["periodStartsAt"]) -> MetaOapg.properties.periodStartsAt: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["periodEndsAt"]) -> MetaOapg.properties.periodEndsAt: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["anchoredAt"]) -> MetaOapg.properties.anchoredAt: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["canceledAt"]) -> MetaOapg.properties.canceledAt: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resumedAt"]) -> MetaOapg.properties.resumedAt: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pausedAt"]) -> MetaOapg.properties.pausedAt: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stripeSubId"]) -> MetaOapg.properties.stripeSubId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stripeCusId"]) -> MetaOapg.properties.stripeCusId: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["subId", "tier", "status", "currency", "periodUnit", "periodCount", "periodStartsAt", "periodEndsAt", "anchoredAt", "canceledAt", "resumedAt", "pausedAt", "stripeSubId", "stripeCusId", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        periodStartsAt: typing.Union[MetaOapg.properties.periodStartsAt, str, datetime, ],
        pausedAt: typing.Union[MetaOapg.properties.pausedAt, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        periodEndsAt: typing.Union[MetaOapg.properties.periodEndsAt, str, datetime, ],
        periodUnit: typing.Union[MetaOapg.properties.periodUnit, str, ],
        anchoredAt: typing.Union[MetaOapg.properties.anchoredAt, str, datetime, ],
        subId: typing.Union[MetaOapg.properties.subId, str, ],
        tier: typing.Union[MetaOapg.properties.tier, str, ],
        canceledAt: typing.Union[MetaOapg.properties.canceledAt, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        periodCount: typing.Union[MetaOapg.properties.periodCount, decimal.Decimal, int, ],
        resumedAt: typing.Union[MetaOapg.properties.resumedAt, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        currency: typing.Union[MetaOapg.properties.currency, str, ],
        stripeSubId: typing.Union[MetaOapg.properties.stripeSubId, str, ],
        stripeCusId: typing.Union[MetaOapg.properties.stripeCusId, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        status: typing.Union[MetaOapg.properties.status, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Subscription':
        return super().__new__(
            cls,
            *args,
            periodStartsAt=periodStartsAt,
            pausedAt=pausedAt,
            periodEndsAt=periodEndsAt,
            periodUnit=periodUnit,
            anchoredAt=anchoredAt,
            subId=subId,
            tier=tier,
            canceledAt=canceledAt,
            periodCount=periodCount,
            resumedAt=resumedAt,
            currency=currency,
            stripeSubId=stripeSubId,
            stripeCusId=stripeCusId,
            status=status,
            _configuration=_configuration,
            **kwargs,
        )
