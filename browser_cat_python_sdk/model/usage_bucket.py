# coding: utf-8

"""
    BrowserCat API

    Providing purr-fect headless browser access via utility endpoints and direct websocket connections.

    The version of the OpenAPI document: 1.0.0
    Contact: support@browsercat.com
    Created by: https://www.browsercat.com/contact
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from browser_cat_python_sdk import schemas  # noqa: F401


class UsageBucket(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "method",
            "clerkUserId",
            "durationMean",
            "keyId",
            "countFailure",
            "durationFailure",
            "usageBucketId",
            "clerkOrgId",
            "durationStd",
            "bucket",
            "durationMax",
            "endpoint",
            "credits",
            "durationSuccess",
            "countSuccess",
            "durationMin",
        }
        
        class properties:
            
            
            class usageBucketId(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'^[\da-f]{8}(?:-[\da-f]{4}){3}-[\da-f]{12}$',
                    }]
            
            
            class keyId(
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'^[\da-f]{8}(?:-[\da-f]{4}){3}-[\da-f]{12}$',
                    }]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'keyId':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class clerkOrgId(
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    max_length = 128
                    min_length = 0
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'clerkOrgId':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class clerkUserId(
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    max_length = 128
                    min_length = 0
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'clerkUserId':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            bucket = schemas.DateTimeSchema
            
            
            class method(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "api": "API",
                        "ws": "WS",
                    }
                
                @schemas.classproperty
                def API(cls):
                    return cls("api")
                
                @schemas.classproperty
                def WS(cls):
                    return cls("ws")
            endpoint = schemas.StrSchema
            credits = schemas.IntSchema
            countSuccess = schemas.IntSchema
            countFailure = schemas.IntSchema
            durationSuccess = schemas.IntSchema
            durationFailure = schemas.IntSchema
            durationMin = schemas.IntSchema
            durationMax = schemas.IntSchema
            durationMean = schemas.IntSchema
            durationStd = schemas.IntSchema
            __annotations__ = {
                "usageBucketId": usageBucketId,
                "keyId": keyId,
                "clerkOrgId": clerkOrgId,
                "clerkUserId": clerkUserId,
                "bucket": bucket,
                "method": method,
                "endpoint": endpoint,
                "credits": credits,
                "countSuccess": countSuccess,
                "countFailure": countFailure,
                "durationSuccess": durationSuccess,
                "durationFailure": durationFailure,
                "durationMin": durationMin,
                "durationMax": durationMax,
                "durationMean": durationMean,
                "durationStd": durationStd,
            }
    
    method: MetaOapg.properties.method
    clerkUserId: MetaOapg.properties.clerkUserId
    durationMean: MetaOapg.properties.durationMean
    keyId: MetaOapg.properties.keyId
    countFailure: MetaOapg.properties.countFailure
    durationFailure: MetaOapg.properties.durationFailure
    usageBucketId: MetaOapg.properties.usageBucketId
    clerkOrgId: MetaOapg.properties.clerkOrgId
    durationStd: MetaOapg.properties.durationStd
    bucket: MetaOapg.properties.bucket
    durationMax: MetaOapg.properties.durationMax
    endpoint: MetaOapg.properties.endpoint
    credits: MetaOapg.properties.credits
    durationSuccess: MetaOapg.properties.durationSuccess
    countSuccess: MetaOapg.properties.countSuccess
    durationMin: MetaOapg.properties.durationMin
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usageBucketId"]) -> MetaOapg.properties.usageBucketId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["keyId"]) -> MetaOapg.properties.keyId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clerkOrgId"]) -> MetaOapg.properties.clerkOrgId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clerkUserId"]) -> MetaOapg.properties.clerkUserId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bucket"]) -> MetaOapg.properties.bucket: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["method"]) -> MetaOapg.properties.method: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["endpoint"]) -> MetaOapg.properties.endpoint: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["credits"]) -> MetaOapg.properties.credits: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["countSuccess"]) -> MetaOapg.properties.countSuccess: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["countFailure"]) -> MetaOapg.properties.countFailure: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["durationSuccess"]) -> MetaOapg.properties.durationSuccess: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["durationFailure"]) -> MetaOapg.properties.durationFailure: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["durationMin"]) -> MetaOapg.properties.durationMin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["durationMax"]) -> MetaOapg.properties.durationMax: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["durationMean"]) -> MetaOapg.properties.durationMean: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["durationStd"]) -> MetaOapg.properties.durationStd: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["usageBucketId", "keyId", "clerkOrgId", "clerkUserId", "bucket", "method", "endpoint", "credits", "countSuccess", "countFailure", "durationSuccess", "durationFailure", "durationMin", "durationMax", "durationMean", "durationStd", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usageBucketId"]) -> MetaOapg.properties.usageBucketId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["keyId"]) -> MetaOapg.properties.keyId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clerkOrgId"]) -> MetaOapg.properties.clerkOrgId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clerkUserId"]) -> MetaOapg.properties.clerkUserId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bucket"]) -> MetaOapg.properties.bucket: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["method"]) -> MetaOapg.properties.method: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["endpoint"]) -> MetaOapg.properties.endpoint: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["credits"]) -> MetaOapg.properties.credits: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["countSuccess"]) -> MetaOapg.properties.countSuccess: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["countFailure"]) -> MetaOapg.properties.countFailure: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["durationSuccess"]) -> MetaOapg.properties.durationSuccess: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["durationFailure"]) -> MetaOapg.properties.durationFailure: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["durationMin"]) -> MetaOapg.properties.durationMin: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["durationMax"]) -> MetaOapg.properties.durationMax: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["durationMean"]) -> MetaOapg.properties.durationMean: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["durationStd"]) -> MetaOapg.properties.durationStd: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["usageBucketId", "keyId", "clerkOrgId", "clerkUserId", "bucket", "method", "endpoint", "credits", "countSuccess", "countFailure", "durationSuccess", "durationFailure", "durationMin", "durationMax", "durationMean", "durationStd", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        method: typing.Union[MetaOapg.properties.method, str, ],
        clerkUserId: typing.Union[MetaOapg.properties.clerkUserId, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        durationMean: typing.Union[MetaOapg.properties.durationMean, decimal.Decimal, int, ],
        keyId: typing.Union[MetaOapg.properties.keyId, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        countFailure: typing.Union[MetaOapg.properties.countFailure, decimal.Decimal, int, ],
        durationFailure: typing.Union[MetaOapg.properties.durationFailure, decimal.Decimal, int, ],
        usageBucketId: typing.Union[MetaOapg.properties.usageBucketId, str, ],
        clerkOrgId: typing.Union[MetaOapg.properties.clerkOrgId, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        durationStd: typing.Union[MetaOapg.properties.durationStd, decimal.Decimal, int, ],
        bucket: typing.Union[MetaOapg.properties.bucket, str, datetime, ],
        durationMax: typing.Union[MetaOapg.properties.durationMax, decimal.Decimal, int, ],
        endpoint: typing.Union[MetaOapg.properties.endpoint, str, ],
        credits: typing.Union[MetaOapg.properties.credits, decimal.Decimal, int, ],
        durationSuccess: typing.Union[MetaOapg.properties.durationSuccess, decimal.Decimal, int, ],
        countSuccess: typing.Union[MetaOapg.properties.countSuccess, decimal.Decimal, int, ],
        durationMin: typing.Union[MetaOapg.properties.durationMin, decimal.Decimal, int, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'UsageBucket':
        return super().__new__(
            cls,
            *args,
            method=method,
            clerkUserId=clerkUserId,
            durationMean=durationMean,
            keyId=keyId,
            countFailure=countFailure,
            durationFailure=durationFailure,
            usageBucketId=usageBucketId,
            clerkOrgId=clerkOrgId,
            durationStd=durationStd,
            bucket=bucket,
            durationMax=durationMax,
            endpoint=endpoint,
            credits=credits,
            durationSuccess=durationSuccess,
            countSuccess=countSuccess,
            durationMin=durationMin,
            _configuration=_configuration,
            **kwargs,
        )
