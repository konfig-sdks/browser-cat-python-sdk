# coding: utf-8

"""
    BrowserCat API

    Providing purr-fect headless browser access via utility endpoints and direct websocket connections.

    The version of the OpenAPI document: 1.0.0
    Contact: support@browsercat.com
    Created by: https://www.browsercat.com/contact
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from browser_cat_python_sdk import schemas  # noqa: F401


class Invoice(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "error",
            "amountDue",
            "subId",
            "totalTax",
            "total",
            "amountPaid",
            "billedAt",
            "invId",
            "totalDiscount",
            "currency",
            "stripeSubId",
            "stripeInvId",
            "stripeCusId",
            "status",
        }
        
        class properties:
            invId = schemas.StrSchema
            
            
            class subId(
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'subId':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def DRAFT(cls):
                    return cls("draft")
                
                @schemas.classproperty
                def OPEN(cls):
                    return cls("open")
                
                @schemas.classproperty
                def VOID(cls):
                    return cls("void")
                
                @schemas.classproperty
                def PAID(cls):
                    return cls("paid")
                
                @schemas.classproperty
                def UNCOLLECTIBLE(cls):
                    return cls("uncollectible")
            error = schemas.AnyTypeSchema
            
            
            class currency(
                schemas.StrSchema
            ):
                pass
            
            
            class amountDue(
                schemas.IntSchema
            ):
                pass
            
            
            class amountPaid(
                schemas.IntSchema
            ):
                pass
            
            
            class total(
                schemas.IntSchema
            ):
                pass
            
            
            class totalDiscount(
                schemas.IntSchema
            ):
                pass
            
            
            class totalTax(
                schemas.IntSchema
            ):
                pass
            billedAt = schemas.DateTimeSchema
            stripeInvId = schemas.StrSchema
            stripeSubId = schemas.AnyTypeSchema
            stripeCusId = schemas.AnyTypeSchema
            __annotations__ = {
                "invId": invId,
                "subId": subId,
                "status": status,
                "error": error,
                "currency": currency,
                "amountDue": amountDue,
                "amountPaid": amountPaid,
                "total": total,
                "totalDiscount": totalDiscount,
                "totalTax": totalTax,
                "billedAt": billedAt,
                "stripeInvId": stripeInvId,
                "stripeSubId": stripeSubId,
                "stripeCusId": stripeCusId,
            }
    
    error: MetaOapg.properties.error
    amountDue: MetaOapg.properties.amountDue
    subId: MetaOapg.properties.subId
    totalTax: MetaOapg.properties.totalTax
    total: MetaOapg.properties.total
    amountPaid: MetaOapg.properties.amountPaid
    billedAt: MetaOapg.properties.billedAt
    invId: MetaOapg.properties.invId
    totalDiscount: MetaOapg.properties.totalDiscount
    currency: MetaOapg.properties.currency
    stripeSubId: MetaOapg.properties.stripeSubId
    stripeInvId: MetaOapg.properties.stripeInvId
    stripeCusId: MetaOapg.properties.stripeCusId
    status: MetaOapg.properties.status
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["invId"]) -> MetaOapg.properties.invId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subId"]) -> MetaOapg.properties.subId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["error"]) -> MetaOapg.properties.error: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amountDue"]) -> MetaOapg.properties.amountDue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amountPaid"]) -> MetaOapg.properties.amountPaid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total"]) -> MetaOapg.properties.total: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalDiscount"]) -> MetaOapg.properties.totalDiscount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalTax"]) -> MetaOapg.properties.totalTax: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["billedAt"]) -> MetaOapg.properties.billedAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stripeInvId"]) -> MetaOapg.properties.stripeInvId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stripeSubId"]) -> MetaOapg.properties.stripeSubId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stripeCusId"]) -> MetaOapg.properties.stripeCusId: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["invId", "subId", "status", "error", "currency", "amountDue", "amountPaid", "total", "totalDiscount", "totalTax", "billedAt", "stripeInvId", "stripeSubId", "stripeCusId", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["invId"]) -> MetaOapg.properties.invId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subId"]) -> MetaOapg.properties.subId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["error"]) -> MetaOapg.properties.error: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amountDue"]) -> MetaOapg.properties.amountDue: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amountPaid"]) -> MetaOapg.properties.amountPaid: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total"]) -> MetaOapg.properties.total: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalDiscount"]) -> MetaOapg.properties.totalDiscount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalTax"]) -> MetaOapg.properties.totalTax: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["billedAt"]) -> MetaOapg.properties.billedAt: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stripeInvId"]) -> MetaOapg.properties.stripeInvId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stripeSubId"]) -> MetaOapg.properties.stripeSubId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stripeCusId"]) -> MetaOapg.properties.stripeCusId: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["invId", "subId", "status", "error", "currency", "amountDue", "amountPaid", "total", "totalDiscount", "totalTax", "billedAt", "stripeInvId", "stripeSubId", "stripeCusId", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        error: typing.Union[MetaOapg.properties.error, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        amountDue: typing.Union[MetaOapg.properties.amountDue, decimal.Decimal, int, ],
        subId: typing.Union[MetaOapg.properties.subId, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        totalTax: typing.Union[MetaOapg.properties.totalTax, decimal.Decimal, int, ],
        total: typing.Union[MetaOapg.properties.total, decimal.Decimal, int, ],
        amountPaid: typing.Union[MetaOapg.properties.amountPaid, decimal.Decimal, int, ],
        billedAt: typing.Union[MetaOapg.properties.billedAt, str, datetime, ],
        invId: typing.Union[MetaOapg.properties.invId, str, ],
        totalDiscount: typing.Union[MetaOapg.properties.totalDiscount, decimal.Decimal, int, ],
        currency: typing.Union[MetaOapg.properties.currency, str, ],
        stripeSubId: typing.Union[MetaOapg.properties.stripeSubId, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        stripeInvId: typing.Union[MetaOapg.properties.stripeInvId, str, ],
        stripeCusId: typing.Union[MetaOapg.properties.stripeCusId, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        status: typing.Union[MetaOapg.properties.status, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Invoice':
        return super().__new__(
            cls,
            *args,
            error=error,
            amountDue=amountDue,
            subId=subId,
            totalTax=totalTax,
            total=total,
            amountPaid=amountPaid,
            billedAt=billedAt,
            invId=invId,
            totalDiscount=totalDiscount,
            currency=currency,
            stripeSubId=stripeSubId,
            stripeInvId=stripeInvId,
            stripeCusId=stripeCusId,
            status=status,
            _configuration=_configuration,
            **kwargs,
        )
