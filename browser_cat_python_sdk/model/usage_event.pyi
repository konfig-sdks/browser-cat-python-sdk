# coding: utf-8

"""
    BrowserCat API

    Providing purr-fect headless browser access via utility endpoints and direct websocket connections.

    The version of the OpenAPI document: 1.0.0
    Contact: support@browsercat.com
    Created by: https://www.browsercat.com/contact
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from browser_cat_python_sdk import schemas  # noqa: F401


class UsageEvent(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "createdAt",
            "eventId",
            "usageSessionId",
            "usageEventId",
            "sentAt",
            "sessionId",
            "type",
            "status",
        }
        
        class properties:
            
            
            class usageEventId(
                schemas.StrSchema
            ):
                pass
            
            
            class usageSessionId(
                schemas.StrSchema
            ):
                pass
            
            
            class type(
                schemas.StrSchema
            ):
                pass
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def PENDING(cls):
                    return cls("pending")
                
                @schemas.classproperty
                def SUCCESS(cls):
                    return cls("success")
                
                @schemas.classproperty
                def FAILURE(cls):
                    return cls("failure")
            sentAt = schemas.DateTimeSchema
            createdAt = schemas.DateTimeSchema
            sessionId = schemas.StrSchema
            eventId = schemas.StrSchema
            data = schemas.AnyTypeSchema
            __annotations__ = {
                "usageEventId": usageEventId,
                "usageSessionId": usageSessionId,
                "type": type,
                "status": status,
                "sentAt": sentAt,
                "createdAt": createdAt,
                "sessionId": sessionId,
                "eventId": eventId,
                "data": data,
            }
    
    createdAt: MetaOapg.properties.createdAt
    eventId: MetaOapg.properties.eventId
    usageSessionId: MetaOapg.properties.usageSessionId
    usageEventId: MetaOapg.properties.usageEventId
    sentAt: MetaOapg.properties.sentAt
    sessionId: MetaOapg.properties.sessionId
    type: MetaOapg.properties.type
    status: MetaOapg.properties.status
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usageEventId"]) -> MetaOapg.properties.usageEventId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usageSessionId"]) -> MetaOapg.properties.usageSessionId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sentAt"]) -> MetaOapg.properties.sentAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdAt"]) -> MetaOapg.properties.createdAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sessionId"]) -> MetaOapg.properties.sessionId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["eventId"]) -> MetaOapg.properties.eventId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["data"]) -> MetaOapg.properties.data: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["usageEventId", "usageSessionId", "type", "status", "sentAt", "createdAt", "sessionId", "eventId", "data", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usageEventId"]) -> MetaOapg.properties.usageEventId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usageSessionId"]) -> MetaOapg.properties.usageSessionId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sentAt"]) -> MetaOapg.properties.sentAt: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdAt"]) -> MetaOapg.properties.createdAt: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sessionId"]) -> MetaOapg.properties.sessionId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["eventId"]) -> MetaOapg.properties.eventId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["data"]) -> typing.Union[MetaOapg.properties.data, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["usageEventId", "usageSessionId", "type", "status", "sentAt", "createdAt", "sessionId", "eventId", "data", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        createdAt: typing.Union[MetaOapg.properties.createdAt, str, datetime, ],
        eventId: typing.Union[MetaOapg.properties.eventId, str, ],
        usageSessionId: typing.Union[MetaOapg.properties.usageSessionId, str, ],
        usageEventId: typing.Union[MetaOapg.properties.usageEventId, str, ],
        sentAt: typing.Union[MetaOapg.properties.sentAt, str, datetime, ],
        sessionId: typing.Union[MetaOapg.properties.sessionId, str, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        status: typing.Union[MetaOapg.properties.status, str, ],
        data: typing.Union[MetaOapg.properties.data, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'UsageEvent':
        return super().__new__(
            cls,
            *args,
            createdAt=createdAt,
            eventId=eventId,
            usageSessionId=usageSessionId,
            usageEventId=usageEventId,
            sentAt=sentAt,
            sessionId=sessionId,
            type=type,
            status=status,
            data=data,
            _configuration=_configuration,
            **kwargs,
        )
